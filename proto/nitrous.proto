syntax = "proto3";

package nitrous;
option go_package = "fennel/nitrous/rpc";

import "value.proto";
import "aggregate.proto";
import "google/rpc/status.proto";

// RPC interface for the Nitrous service.
// Nitrous service exposes a read-only RPC interface. All write operations
// are performed using the Nitrous binlog that consists of binary-encoded
// NitrousOp messages.
service Nitrous {
  // APIs to read data.
  rpc GetProfiles(ProfilesRequest) returns (ProfilesResponse);
  rpc GetAggregateValues(stream AggregateValuesRequest)
      returns (stream AggregateValuesResponse);
  // API to get processing lag. This is especially useful in tests.
  rpc GetLag(LagRequest) returns (LagResponse);
}

enum OpType {
  AGG_EVENT = 0;
  PROFILE_UPDATE = 1;
  CREATE_AGGREGATE = 2;
  DELETE_AGGREGATE = 3;
}

message NitrousOp {
  uint32 tier_id = 1;
  OpType type = 2;
  oneof op {
    // Define a new aggregate in nitrous.
    CreateAggregate create_aggregate = 3;
    // Delete an aggregate from nitrous.
    DeleteAggregate delete_aggregate = 4;
    // Log an aggregate event.
    AggEvent agg_event = 5;
    // Log a profile update.
    ProfileUpdate profile = 6;
  }
}

message CreateAggregate {
  uint32 agg_id = 1;
  AggOptions options = 2;
}

message DeleteAggregate { uint32 agg_id = 1; }

message AggEvent {
  uint32 agg_id = 1;
  string groupkey = 2;
  uint32 timestamp = 3;
  PValue value = 4;
}

message ProfileKey {
  string otype = 1;
  string oid = 2;
  string zkey = 3;
}

message ProfileUpdate {
  ProfileKey key = 1;
  PValue value = 2;
  uint32 timestamp = 3;
}

message LagRequest {}

message LagResponse { uint64 lag = 1; }

enum AggCodec {
  NONE = 0;
  V1 = 1 [deprecated=true];
  V2 = 2;

  // next: 3
}

message AggregateValuesRequest {
  uint32 tier_id = 1;
  uint32 agg_id = 2;
  AggCodec codec = 3;
  repeated string groupkeys = 4;
  repeated PVDict kwargs = 5;
}

message AggregateValuesResponse {
  repeated PValue results = 1;
  google.rpc.Status status = 2;
}

message ProfilesRequest {
  uint32 tier_id = 1;
  repeated ProfileKey rows = 2;
}

message ProfilesResponse { repeated PValue results = 1; }
