syntax = "proto3";

option go_package = "fennel/engine/ast/proto";

message Ast {
  oneof node {
    Atom atom = 1;
    Binary binary = 2;
    Statement statement = 3;
    Query query = 4;
    List list = 5;
    Dict dict = 6;
    OpCall opcall = 7;
    Var var = 8;
    // Table table = 9; [deprecated now]
    // At at = 10; [deprecated now]
    Lookup lookup = 11;
    IfElse ifelse = 12;
    FnCall fncall = 13;
    // HighFnCall hfncall = 14; [deprecated now]
    Unary unary = 15;
    // Tuple tuple = 16; [deprecated now]
  }
}

message Unary {
  string op = 1;
  Ast operand = 2;
}

message Binary {
  Ast left = 1;
  Ast right = 2;
  string op = 3;
}

message Statement {
  string name = 1;
  Ast body = 2;
}

message Query {
  repeated Statement statements = 1;
}

message Atom {
  oneof inner {
    int64 int = 1;
    string string = 2;
    bool bool = 3;
    double double = 4;
  }
}

message List {
  repeated Ast values = 1;
}

message Dict {
  map<string, Ast> values = 1;
}


message OpCall {
//  [deprecated] Ast operand = 1;
  string namespace = 2;
  string name = 3;
  Dict kwargs = 4;
  repeated Ast operands = 5;
  repeated string vars = 6;
}

message Var {
  string name = 1;
}

message Lookup {
  Ast on = 1;
  string property = 2;
}

message IfElse {
  Ast condition = 1;
  Ast then_do = 2;
  Ast else_do = 3;
}


message FnCall {
  string module = 1;
  string name = 2;
  map<string, Ast> kwargs = 3;
}
