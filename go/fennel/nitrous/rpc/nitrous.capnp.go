// Code generated by capnpc-go. DO NOT EDIT.

package rpc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	value "fennel/lib/value"
)

type AggEventCap capnp.Struct

// AggEventCap_TypeID is the unique identifier for the type AggEventCap.
const AggEventCap_TypeID = 0xe9b3b3f9d1c6adb6

func NewAggEventCap(s *capnp.Segment) (AggEventCap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return AggEventCap(st), err
}

func NewRootAggEventCap(s *capnp.Segment) (AggEventCap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return AggEventCap(st), err
}

func ReadRootAggEventCap(msg *capnp.Message) (AggEventCap, error) {
	root, err := msg.Root()
	return AggEventCap(root.Struct()), err
}

func (s AggEventCap) String() string {
	str, _ := text.Marshal(0xe9b3b3f9d1c6adb6, capnp.Struct(s))
	return str
}

func (s AggEventCap) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AggEventCap) DecodeFromPtr(p capnp.Ptr) AggEventCap {
	return AggEventCap(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AggEventCap) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AggEventCap) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AggEventCap) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AggEventCap) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AggEventCap) AggId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s AggEventCap) SetAggId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s AggEventCap) Groupkey() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AggEventCap) HasGroupkey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AggEventCap) GroupkeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AggEventCap) SetGroupkey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AggEventCap) Timestamp() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s AggEventCap) SetTimestamp(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s AggEventCap) Value() (value.CapnValue, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return value.CapnValue(p.Struct()), err
}

func (s AggEventCap) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AggEventCap) SetValue(v value.CapnValue) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated value.CapnValue struct, preferring placement in s's segment.
func (s AggEventCap) NewValue() (value.CapnValue, error) {
	ss, err := value.NewCapnValue(capnp.Struct(s).Segment())
	if err != nil {
		return value.CapnValue{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// AggEventCap_List is a list of AggEventCap.
type AggEventCap_List = capnp.StructList[AggEventCap]

// NewAggEventCap creates a new list of AggEventCap.
func NewAggEventCap_List(s *capnp.Segment, sz int32) (AggEventCap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[AggEventCap](l), err
}

// AggEventCap_Future is a wrapper for a AggEventCap promised by a client call.
type AggEventCap_Future struct{ *capnp.Future }

func (p AggEventCap_Future) Struct() (AggEventCap, error) {
	s, err := p.Future.Struct()
	return AggEventCap(s), err
}

func (p AggEventCap_Future) Value() value.CapnValue_Future {
	return value.CapnValue_Future{Future: p.Future.Field(1, nil)}
}

type NitrousBinlogEventCap capnp.Struct

// NitrousBinlogEventCap_TypeID is the unique identifier for the type NitrousBinlogEventCap.
const NitrousBinlogEventCap_TypeID = 0xc59c25d54d96adfe

func NewNitrousBinlogEventCap(s *capnp.Segment) (NitrousBinlogEventCap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NitrousBinlogEventCap(st), err
}

func NewRootNitrousBinlogEventCap(s *capnp.Segment) (NitrousBinlogEventCap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NitrousBinlogEventCap(st), err
}

func ReadRootNitrousBinlogEventCap(msg *capnp.Message) (NitrousBinlogEventCap, error) {
	root, err := msg.Root()
	return NitrousBinlogEventCap(root.Struct()), err
}

func (s NitrousBinlogEventCap) String() string {
	str, _ := text.Marshal(0xc59c25d54d96adfe, capnp.Struct(s))
	return str
}

func (s NitrousBinlogEventCap) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NitrousBinlogEventCap) DecodeFromPtr(p capnp.Ptr) NitrousBinlogEventCap {
	return NitrousBinlogEventCap(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NitrousBinlogEventCap) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NitrousBinlogEventCap) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NitrousBinlogEventCap) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NitrousBinlogEventCap) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NitrousBinlogEventCap) TierId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s NitrousBinlogEventCap) SetTierId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s NitrousBinlogEventCap) AggEvent() (AggEventCap, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AggEventCap(p.Struct()), err
}

func (s NitrousBinlogEventCap) HasAggEvent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NitrousBinlogEventCap) SetAggEvent(v AggEventCap) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAggEvent sets the aggEvent field to a newly
// allocated AggEventCap struct, preferring placement in s's segment.
func (s NitrousBinlogEventCap) NewAggEvent() (AggEventCap, error) {
	ss, err := NewAggEventCap(capnp.Struct(s).Segment())
	if err != nil {
		return AggEventCap{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// NitrousBinlogEventCap_List is a list of NitrousBinlogEventCap.
type NitrousBinlogEventCap_List = capnp.StructList[NitrousBinlogEventCap]

// NewNitrousBinlogEventCap creates a new list of NitrousBinlogEventCap.
func NewNitrousBinlogEventCap_List(s *capnp.Segment, sz int32) (NitrousBinlogEventCap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NitrousBinlogEventCap](l), err
}

// NitrousBinlogEventCap_Future is a wrapper for a NitrousBinlogEventCap promised by a client call.
type NitrousBinlogEventCap_Future struct{ *capnp.Future }

func (p NitrousBinlogEventCap_Future) Struct() (NitrousBinlogEventCap, error) {
	s, err := p.Future.Struct()
	return NitrousBinlogEventCap(s), err
}

func (p NitrousBinlogEventCap_Future) AggEvent() AggEventCap_Future {
	return AggEventCap_Future{Future: p.Future.Field(0, nil)}
}

const schema_896ac3e20ff6ad0c = "x\xda\\\x8f?K#A\x18\x87\x7f\xbf\x99\xe4\x92\"" +
	"\xb9\xec\x92\\q\xd7\x04\x8e;\xb8\x83\xbb\xe3\xeel$" +
	"\x8d\x7f\x82\x85\x82\xe2\xd8\x096\x83Y\xd6\xd5\xcdfI" +
	"v\x13\x05;+\x1b;\xadl\xfc\x00[H\xc0/ " +
	"\xda+\xd8Z\xd8\x88\xa5\x8dh\xe3\xca&1\x11\xbbw" +
	"\x86g\xe6y^\xe3z2\xf5/\xdf\x91\x10\xeaG\xfa" +
	"C\xfc\x1c\x1d\xcc_}?<\x83\xfaH\xc6\xb9\xe8\xa1" +
	"ps\xba\xbe\x8b43\xc0\xd8\x11\xbf\xb2x\x9c\x8c\xc5" +
	"\x88\x1d0>\x89\xce/\x9e\xba\xdd\xbb\xf7\xb4H\x90\xbc" +
	"\xb8,~\xeeM\x9f\xc4-\x96c\xcf\x09\x9a\x8d\xb0\xf5" +
	"G\xaej\xdf\xf3+\x0b\xfd\xe3\xb4\xe3\xb9\x0d{\xa6m" +
	"yA\xa6\xaa\xfdERee\x0aH\x110\x7fV\x00" +
	"\xf5MR\xfd\x15$KL\xee~\xcf\x01\xea\x97\xa4\x1a" +
	"\x17\x9c\x08\x1c\xab9[c\x16\x82Y0\xd6v\xff'" +
	"\x004Fu \x0dp\x18 \xfa\x01S\x03\xb8\xaa\xd9" +
	"\xd3\x1aC\xad\xfe\x0f\xa8\x15I\xb56\xd2Z\x89\xb6&" +
	"\xa9|AS\xb0D\x01\x98\xf5%@\xb9\x92jS\xd0" +
	"\x94,Q\x02f\x98\xbc\xf6%\xd5\xb6`Y\xdb\xf6\x9b" +
	">\xbb\xd9\x08\xfd\x0dk+\xe9\xcbA0\x07\xc6\x81S" +
	"\xb7Z\x81\xae\x83\xfe+Wnk7\xb4h\xc4_\xf6" +
	"\x0b\x8f{;\xee\xfd`\x83\x97\x00\x00\x00\xff\xffo\xc6" +
	"i\xb6"

func init() {
	schemas.Register(schema_896ac3e20ff6ad0c,
		0xc59c25d54d96adfe,
		0xe9b3b3f9d1c6adb6)
}
