// Code generated by capnpc-go. DO NOT EDIT.

package rpc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type AggEventCap capnp.Struct

// AggEventCap_TypeID is the unique identifier for the type AggEventCap.
const AggEventCap_TypeID = 0xe9b3b3f9d1c6adb6

func NewAggEventCap(s *capnp.Segment) (AggEventCap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AggEventCap(st), err
}

func NewRootAggEventCap(s *capnp.Segment) (AggEventCap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AggEventCap(st), err
}

func ReadRootAggEventCap(msg *capnp.Message) (AggEventCap, error) {
	root, err := msg.Root()
	return AggEventCap(root.Struct()), err
}

func (s AggEventCap) String() string {
	str, _ := text.Marshal(0xe9b3b3f9d1c6adb6, capnp.Struct(s))
	return str
}

func (s AggEventCap) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AggEventCap) DecodeFromPtr(p capnp.Ptr) AggEventCap {
	return AggEventCap(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AggEventCap) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AggEventCap) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AggEventCap) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AggEventCap) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AggEventCap) AggId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s AggEventCap) SetAggId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s AggEventCap) Groupkey() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AggEventCap) HasGroupkey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AggEventCap) GroupkeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AggEventCap) SetGroupkey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AggEventCap) Timestamp() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s AggEventCap) SetTimestamp(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

// AggEventCap_List is a list of AggEventCap.
type AggEventCap_List = capnp.StructList[AggEventCap]

// NewAggEventCap creates a new list of AggEventCap.
func NewAggEventCap_List(s *capnp.Segment, sz int32) (AggEventCap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AggEventCap](l), err
}

// AggEventCap_Future is a wrapper for a AggEventCap promised by a client call.
type AggEventCap_Future struct{ *capnp.Future }

func (p AggEventCap_Future) Struct() (AggEventCap, error) {
	s, err := p.Future.Struct()
	return AggEventCap(s), err
}

type NitrousBinlogEventCap capnp.Struct

// NitrousBinlogEventCap_TypeID is the unique identifier for the type NitrousBinlogEventCap.
const NitrousBinlogEventCap_TypeID = 0xc59c25d54d96adfe

func NewNitrousBinlogEventCap(s *capnp.Segment) (NitrousBinlogEventCap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NitrousBinlogEventCap(st), err
}

func NewRootNitrousBinlogEventCap(s *capnp.Segment) (NitrousBinlogEventCap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NitrousBinlogEventCap(st), err
}

func ReadRootNitrousBinlogEventCap(msg *capnp.Message) (NitrousBinlogEventCap, error) {
	root, err := msg.Root()
	return NitrousBinlogEventCap(root.Struct()), err
}

func (s NitrousBinlogEventCap) String() string {
	str, _ := text.Marshal(0xc59c25d54d96adfe, capnp.Struct(s))
	return str
}

func (s NitrousBinlogEventCap) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NitrousBinlogEventCap) DecodeFromPtr(p capnp.Ptr) NitrousBinlogEventCap {
	return NitrousBinlogEventCap(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NitrousBinlogEventCap) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NitrousBinlogEventCap) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NitrousBinlogEventCap) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NitrousBinlogEventCap) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NitrousBinlogEventCap) TierId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s NitrousBinlogEventCap) SetTierId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s NitrousBinlogEventCap) AggEvent() (AggEventCap, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AggEventCap(p.Struct()), err
}

func (s NitrousBinlogEventCap) HasAggEvent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NitrousBinlogEventCap) SetAggEvent(v AggEventCap) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAggEvent sets the aggEvent field to a newly
// allocated AggEventCap struct, preferring placement in s's segment.
func (s NitrousBinlogEventCap) NewAggEvent() (AggEventCap, error) {
	ss, err := NewAggEventCap(capnp.Struct(s).Segment())
	if err != nil {
		return AggEventCap{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// NitrousBinlogEventCap_List is a list of NitrousBinlogEventCap.
type NitrousBinlogEventCap_List = capnp.StructList[NitrousBinlogEventCap]

// NewNitrousBinlogEventCap creates a new list of NitrousBinlogEventCap.
func NewNitrousBinlogEventCap_List(s *capnp.Segment, sz int32) (NitrousBinlogEventCap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NitrousBinlogEventCap](l), err
}

// NitrousBinlogEventCap_Future is a wrapper for a NitrousBinlogEventCap promised by a client call.
type NitrousBinlogEventCap_Future struct{ *capnp.Future }

func (p NitrousBinlogEventCap_Future) Struct() (NitrousBinlogEventCap, error) {
	s, err := p.Future.Struct()
	return NitrousBinlogEventCap(s), err
}

func (p NitrousBinlogEventCap_Future) AggEvent() AggEventCap_Future {
	return AggEventCap_Future{Future: p.Future.Field(0, nil)}
}

const schema_896ac3e20ff6ad0c = "x\xdal\x8e1/\x03a\x1c\xc6\x9f\xe7}[\xedp" +
	"\xe8\xa5M\xd8$\xc2 QQ\x93tQ\x9a&*H" +
	"\xffbd\xb8p\xb9\x1cz\xbd\xb4W\xe2#\xf8\x02&" +
	"\x9b\xb914\xf1\x05\x84\x9d\xc4\x17\xb0\x19-\x12\x03\xaf" +
	"\\Kk\xb0=\xef\x9b_\xfe\xbf_\xe6\xba\x94(\x8c" +
	"N((\x99L\x8e\x98\xaf\xce\xe5\xd6\xf3\xec\xd5=d" +
	"\x8c4V\xe7}\xfc\xe5\xee\xe8\x02I\xa6\x80\xc2\xdb4" +
	"\xb3\x8c\x97\xfdy\x06\x9a\xdb\xce\xc3\xe3G\xb7\xfb\xfa\x1f" +
	"\x9b\xdd\xe7S\xd6\xef-\x977\xc8\x9b\xc0\x8f\x9a\x8dv" +
	"kA\x1f8a\x10\x16\xb7\xfb\xcf5?8ix\x95" +
	"S7\x88Re'\xac\x91\x92\xd6\x09 A\xc0\x9e+" +
	"\x022\xa3)\x8b\x8ad\x8e\xf1_~\x03\x90yMY" +
	"V\\\x89|\xb7Y=d\x1a\x8ai\xd08^\xff\x12" +
	"\x00f\x86u 3\xe0 @\xf5\x03V\x7f\xe0\xb2\xc3" +
	"\x9e\xd6\x1ah+K\x80\x944es\xa8\xad\xc6\xdau" +
	"M\xd9U\xb4\x15sT\x80-;\x80\xd44eOq" +
	"\xca\xf1\xbc?)^\xb3\xd1\x0e\x8f\xdd\xf38\xc5\x82\xa2" +
	"\x05\x9a\xc8\xaf\xbb\xad\xc8\xa9\x83\xe1/\xf7\x1d\x00\x00\xff" +
	"\xff[\"^\x7f"

func init() {
	schemas.Register(schema_896ac3e20ff6ad0c,
		0xc59c25d54d96adfe,
		0xe9b3b3f9d1c6adb6)
}
