//go:build sagemaker

package embedding

import (
	"context"
	"testing"
	"time"

	modelstore "fennel/controller/modelstore"
	"fennel/lib/value"
	"fennel/test"
	"fennel/test/optest"
	"fennel/tier"

	"github.com/stretchr/testify/assert"
)

func TestNoModelsError(t *testing.T) {
	intable := []value.Value{
		value.Nil,
	}
	contextKwargTable := []value.Dict{
		value.NewDict(map[string]value.Value{
			"input": value.String("This is a text"),
		}),
	}

	tier, err := test.Tier()
	assert.NoError(t, err)
	defer test.Teardown(tier)
	err = test.AddSagemakerClientToTier(&tier)
	assert.NoError(t, err)

	optest.AssertError(t, tier, &pretrainedModel{}, value.NewDict(map[string]value.Value{
		"model": value.String("not-a-model"),
		"field": value.String("random_field"),
	}), [][]value.Value{intable}, contextKwargTable)
}

func TestPredictModelError(t *testing.T) {
	intable := []value.Value{
		value.Nil,
	}
	contextKwargTable := []value.Dict{
		value.NewDict(map[string]value.Value{
			"input": value.NewList(value.String("a"), value.String("b")),
		}),
		value.NewDict(map[string]value.Value{
			"input": value.String("This is a text again"),
		}),
	}

	tier, err := test.Tier()
	assert.NoError(t, err)
	defer test.Teardown(tier)
	err = test.AddSagemakerClientToTier(&tier)
	assert.NoError(t, err)
	model := "sbert"
	defer cleanupPreTrainedModelTest(t, tier, model)

	err = modelstore.EnableModel(context.Background(), tier, model)
	assert.NoError(t, err)
	// It takes a couple of minutes for the model to be ready
	time.Sleep(3 * time.Minute)

	endpointName := modelstore.PreTrainedModelId(model, tier.ID)

	// assert that resources are created in sagemaker.
	exists, err := tier.SagemakerClient.EndpointExists(context.Background(), endpointName)
	assert.NoError(t, err)
	assert.True(t, exists)

	optest.AssertError(t, tier, &pretrainedModel{}, value.NewDict(map[string]value.Value{
		"model": value.String("sbert"),
		"field": value.String("random_field"),
	}), [][]value.Value{intable}, contextKwargTable)
}

func FromList(l []float64) value.List {
	v := value.NewList()
	for _, x := range l {
		v.Append(value.Double(x))
	}
	return v
}

func TestPredictModelWorking(t *testing.T) {
	intable := []value.Value{
		value.NewDict(map[string]value.Value{"foo": value.String("bar")}),
		value.NewDict(map[string]value.Value{"bar": value.String("foo")}),
	}
	contextKwargTable := []value.Dict{
		value.NewDict(map[string]value.Value{
			"input": value.String("This is a text"),
		}),
		value.NewDict(map[string]value.Value{
			"input": value.String("This is a text again"),
		}),
	}

	tier, err := test.Tier()
	assert.NoError(t, err)
	defer test.Teardown(tier)
	err = test.AddSagemakerClientToTier(&tier)
	assert.NoError(t, err)
	model := "sbert"
	defer cleanupPreTrainedModelTest(t, tier, model)

	err = modelstore.EnableModel(context.Background(), tier, model)
	assert.NoError(t, err)
	// It takes a couple of minutes for the model to be ready
	time.Sleep(3 * time.Minute)

	endpointName := modelstore.PreTrainedModelId(model, tier.ID)

	// assert that resources are created in sagemaker.
	exists, err := tier.SagemakerClient.EndpointExists(context.Background(), endpointName)
	assert.NoError(t, err)
	assert.True(t, exists)
	expected := []value.Value{
		value.NewDict(map[string]value.Value{"bert_embedding": FromList([]float64{-0.019942477345466614, 0.1003115326166153, -0.03595660626888275, -0.016818514093756676, -0.006736243609338999, -0.007809161674231291, 0.05789310485124588, 0.03406812623143196, 0.1049879640340805, 0.00493366364389658, 0.011034350842237473, 0.04141721874475479, -0.012370051816105843, -0.02010967954993248, -0.06264238059520721, 0.02789241261780262, 0.01518995314836502, -0.07826516777276993, -0.039404042065143585, -0.006739296019077301, 0.007375332061201334, 0.17279967665672302, -0.03939902409911156, 0.021152975037693977, 0.026765983551740646, 0.06693573296070099, -0.08022820949554443, 0.10415438562631607, 0.06484868377447128, 0.04777401685714722, -0.05935121327638626, 0.06837931275367737, 0.14305509626865387, 0.03256737440824509, 0.0067841471172869205, 0.04307025671005249, -0.02389601245522499, 0.04184892401099205, -0.015428616665303707, 0.045916277915239334, 0.027536017820239067, -0.09374287724494934, 0.023843914270401, 0.025044035166502, -0.015667829662561417, 0.03976995870471001, -0.07922325283288956, -0.017614996060729027, -0.0037879704032093287, 0.014043210074305534, -0.02861996740102768, -0.060995541512966156, -0.043646980077028275, -0.05698951706290245, 0.01641225814819336, 0.08223311603069305, 0.032758474349975586, -0.034679386764764786, 0.046243444085121155, 0.007635052315890789, 0.027707621455192566, 0.03950763866305351, -0.004776917397975922, 0.026292026042938232, 0.0850374847650528, 0.003126472933217883, -0.0455145500600338, -0.021443568170070648, -0.07104454934597015, -0.055395450443029404, 0.034045424312353134, -0.01294532511383295, -0.023113302886486053, 0.06807403266429901, -0.032037656754255295, -0.007631630636751652, -0.043877098709344864, -0.08620250225067139, 0.0446946881711483, 0.0707947239279747, -0.05723375082015991, -0.018312795087695122, 0.023696694523096085, 0.027120258659124374, -0.05199101194739342, 0.08138123899698257, 0.022066041827201843, -0.06213422119617462, 0.012801431119441986, 0.010280213318765163, 0.012562587857246399, -0.0343918614089489, 0.06656616926193237, -0.00879337266087532, -0.08379389345645905, -0.004963813815265894, -0.06826099008321762, -0.048247501254081726, -0.04392818734049797, 0.1605326533317566, 0.027510683983564377, -0.01428449060767889, 0.006119106896221638, 0.005031666252762079, -0.04873322695493698, -0.10798550397157669, 0.004195797722786665, 0.003731626085937023, 0.04504769295454025, -0.04950347915291786, -0.024502212181687355, -0.05924372002482414, -0.09799988567829132, -0.02996380813419819, 0.02317465841770172, -0.016476918011903763, -0.01976483315229416, -0.01776444911956787, 0.08433979749679565, 0.02496553584933281, -0.007590338587760925, -0.04469321668148041, -0.06712606549263, -0.005829445086419582, -0.05835793539881706, -0.08407583087682724, 0.030132733285427094, -0.000000000000000000000000000000005491049292113719, -0.0016713168006390333, 0.014823650941252708, 0.015909142792224884, 0.08837627619504929, -0.012308473698794842, 0.017198264598846436, -0.08243363350629807, -0.055004969239234924, -0.021417725831270218, -0.06486237049102783, -0.053184304386377335, -0.07530301064252853, -0.006682181265205145, -0.00009468225471209735, 0.06272688508033752, -0.045964255928993225, -0.01178688369691372, 0.11394718289375305, 0.04585171118378639, -0.004796616733074188, -0.047260891646146774, 0.0748700276017189, 0.03833811357617378, -0.08183057606220245, -0.07439207285642624, -0.007750079967081547, 0.003640139475464821, -0.012168379500508308, 0.007063237950205803, 0.03432951495051384, -0.004690322559326887, 0.01221875473856926, 0.05740799009799957, -0.0936322957277298, -0.005071409046649933, -0.037633996456861496, 0.032590530812740326, -0.02508753165602684, 0.04980136826634407, 0.0035021118819713593, -0.05236922949552536, -0.03696246072649956, -0.0155111663043499, -0.06544137001037598, 0.06867903470993042, 0.08065837621688843, 0.03637567535042763, -0.0017426651902496815, -0.005163110792636871, -0.035316914319992065, -0.012309773825109005, 0.010576597414910793, 0.02788132056593895, -0.014774139970541, 0.01984071359038353, 0.005327378399670124, 0.04355927184224129, 0.09040207415819168, -0.024320723488926888, 0.02644275315105915, 0.026534242555499077, 0.03211190178990364, -0.01740655116736889, -0.04961848258972168, -0.02546762302517891, -0.00260886806063354, -0.019580261781811714, -0.032170962542295456, 0.08467326313257217, -0.042176663875579834, -0.05277945101261139, 0.008634554222226143, 0.03935849666595459, 0.006543861236423254, -0.07613378763198853, -0.012004037387669086, 0.0014629778452217579, 0.027508921921253204, -0.021312959492206573, 0.051969483494758606, -0.0562187135219574, -0.13118238747119904, 0.024104008451104164, -0.03537379950284958, -0.015034571290016174, 0.0024492465890944004, -0.002342999679967761, -0.13210391998291016, 0.03996775299310684, 0.01897919550538063, -0.12529082596302032, 0.018905596807599068, -0.03831280395388603, -0.018686741590499878, 0.062292635440826416, 0.000000000000000000000000000000002950343883770089, -0.02925885282456875, 0.06301447749137878, -0.0846821740269661, 0.02367749996483326, 0.11052697896957397, 0.029561100527644157, 0.05788055807352066, 0.07115669548511505, 0.01852249912917614, 0.11380002647638321, -0.04742932692170143, 0.09497551620006561, 0.054386209696531296, -0.054575640708208084, 0.021477945148944855, 0.007128361612558365, 0.12714944779872894, -0.039033710956573486, 0.004508123733103275, 0.038357168436050415, -0.0920553058385849, 0.019317829981446266, -0.0668395459651947, 0.030209263786673546, 0.05448399856686592, 0.040371499955654144, 0.06619700789451599, -0.02660793624818325, 0.009438274428248405, -0.01462357398122549, -0.009892046451568604, -0.016351960599422455, 0.020868629217147827, -0.0029379643965512514, -0.02460426278412342, -0.0016226890729740262, 0.09357516467571259, -0.0512809157371521, -0.08687987923622131, 0.07760157436132431, 0.07752887904644012, 0.036568671464920044, 0.03397923335433006, 0.05232799053192139, -0.010900881141424179, -0.018734468147158623, -0.06260804086923599, -0.05185799300670624, 0.05437136068940163, 0.07711334526538849, 0.00518846558406949, -0.0722886323928833, -0.0054353708401322365, -0.004968880210071802, -0.07828722149133682, 0.008246916346251965, -0.029460610821843147, 0.011262625455856323, -0.004326389171183109, -0.04017156362533569, -0.04134964942932129, -0.0038584796711802483, -0.039862535893917084, 0.0835200697183609, 0.058003220707178116, -0.021377243101596832, -0.03571610897779465, 0.0315571092069149, -0.05119166150689125, -0.0044479831121861935, 0.13286159932613373, -0.0005200304440222681, -0.15698440372943878, -0.03871716186404228, 0.03595644235610962, -0.09190268814563751, -0.010044598020613194, 0.019133400171995163, -0.05585189536213875, -0.006241312250494957, 0.12428688257932663, -0.021487247198820114, -0.0075057996436953545, 0.0367385558784008, -0.0054419818334281445, 0.023534109815955162, -0.07126526534557343, 0.03335772082209587, -0.032819513231515884, 0.011171070858836174, -0.027468468993902206, 0.03444613516330719, 0.005572458729147911, 0.06784156709909439, -0.032250624150037766, -0.000000016543863168294592, 0.0256881732493639, -0.0822204053401947, -0.06500368565320969, -0.04490632563829422, -0.02841022238135338, 0.11796465516090393, 0.05675650015473366, -0.13576602935791016, -0.039686236530542374, -0.0038449368439614773, 0.07839062809944153, 0.02196604385972023, -0.05976320430636406, -0.02750474400818348, 0.059054646641016006, -0.00827674102038145, -0.005465537775307894, -0.03481501713395119, 0.005632054526358843, 0.014712359756231308, 0.01533360406756401, 0.0039911591447889805, -0.028930610045790672, 0.01825316809117794, -0.03249283879995346, 0.061960626393556595, -0.045110248029232025, 0.040474943816661835, -0.022545190528035164, 0.021195244044065475, 0.025914745405316353, 0.06764645874500275, 0.004037106409668922, -0.03169756382703781, 0.00904554408043623, 0.048697881400585175, 0.057833656668663025, -0.055319953709840775, 0.09000010043382645, 0.0011739584151655436, 0.0331476628780365, 0.04527726024389267, -0.02226344496011734, 0.023904869332909584, -0.014951450750231743, 0.01925475522875786, -0.01695575937628746, -0.07270368188619614, -0.004842870403081179, -0.031789034605026245, 0.012883263640105724, -0.029895279556512833, 0.06405294686555862, 0.0085371108725667, -0.017839012667536736, -0.049061574041843414, 0.010770395398139954, 0.021328270435333252, -0.06478030234575272, -0.005167079623788595, 0.08052154630422592, 0.04700203239917755, 0.04756535217165947, -0.041564587503671646}), "foo": value.String("bar")}),
		value.NewDict(map[string]value.Value{"bert_embedding": FromList([]float64{-0.03043246455490589, 0.04351946711540222, -0.0039811087772250175, 0.047139111906290054, -0.016536958515644073, -0.06428268551826477, 0.058599721640348434, -0.0008842503884807229, 0.11562284827232361, -0.013767852447926998, 0.012176667340099812, 0.040097400546073914, -0.02445482835173607, -0.0050834850408136845, -0.09052059799432755, 0.040325362235307693, 0.058386556804180145, -0.023140674456954002, -0.02374248020350933, -0.014790485613048077, -0.0030457833781838417, 0.12635064125061035, -0.025095641613006592, 0.02230241522192955, 0.0361059233546257, 0.008314106613397598, -0.05715811252593994, 0.10668458044528961, 0.010856813751161098, 0.04712442308664322, -0.05356259644031525, 0.09433742612600327, 0.11473463475704193, 0.03253086656332016, 0.03070150502026081, 0.03934565931558609, -0.02517062984406948, 0.030084975063800812, 0.006443812511861324, 0.07336203753948212, 0.013594314455986023, -0.11852683871984482, -0.016718240454792976, -0.037118006497621536, 0.003612810978665948, 0.020639000460505486, -0.041541095823049545, -0.05159357935190201, 0.04514558985829353, 0.005035001784563065, -0.015009032562375069, -0.05580994859337807, -0.060742419213056564, -0.057386185973882675, 0.047551244497299194, 0.1314476728439331, 0.03319038450717926, -0.002347505185753107, 0.06395173072814941, -0.0027139477897435427, 0.043398354202508926, 0.04817505180835724, 0.003434787504374981, 0.04058225080370903, 0.0780586302280426, -0.0022837051656097174, -0.09381283074617386, -0.03624388948082924, -0.07386752963066101, -0.02486385963857174, 0.09338269382715225, 0.017499269917607307, -0.019779959693551064, 0.010127539746463299, -0.02845200151205063, -0.01695365272462368, -0.0953722819685936, -0.07299447804689407, -0.0008161231526173651, 0.07401317358016968, -0.06344593316316605, -0.05984663963317871, 0.0018526496132835746, -0.010844885371625423, -0.040699511766433716, 0.03094221092760563, -0.005762254819273949, -0.08547194302082062, 0.030193543061614037, 0.014714157208800316, 0.02789931744337082, -0.013910045847296715, 0.1130136102437973, -0.012893621809780598, -0.07853776216506958, -0.02844173274934292, -0.07991783320903778, -0.022262031212449074, -0.06512332707643509, 0.1485905945301056, -0.011785648763179779, -0.028658978641033173, 0.03190964087843895, 0.02638276293873787, -0.03968575596809387, -0.12079223990440369, 0.02607245370745659, 0.05723976716399193, 0.03514716029167175, 0.005239414516836405, -0.0375225730240345, -0.060292478650808334, -0.10080453008413315, -0.008809555321931839, 0.02590794302523136, -0.014568910002708435, -0.01036396250128746, -0.02165308967232704, 0.03707779943943024, 0.01407115999609232, -0.05449262261390686, -0.024888774380087852, -0.054121654480695724, -0.01219613291323185, -0.027197228744626045, -0.0805770754814148, 0.06213436275720596, -0.0000000000000000000000000000000038643204962351726, -0.07796751707792282, 0.05041608214378357, -0.018409764394164085, 0.04109317064285278, -0.000799644913058728, 0.02041408233344555, -0.0457431823015213, -0.019995294511318207, 0.000917674507945776, -0.10123061388731003, -0.019343925639986992, -0.06895148009061813, 0.03943900391459465, 0.01413459051400423, -0.013604274950921535, -0.03155748173594475, -0.017812402918934822, 0.13872288167476654, 0.044493671506643295, 0.009329929016530514, -0.05979595705866814, 0.09745356440544128, 0.06059326231479645, -0.04508902132511139, -0.08800797909498215, 0.03840392082929611, 0.030027953907847404, 0.004021340515464544, 0.04497494176030159, 0.028507323935627937, 0.004271474666893482, 0.03553133085370064, 0.043174151331186295, -0.051454443484544754, -0.022667722776532173, 0.029422853142023087, 0.06866564601659775, -0.05425233021378517, -0.022556407377123833, -0.005261459853500128, -0.04961154982447624, 0.0017983440775424242, -0.04124423488974571, -0.07735836505889893, 0.1049310639500618, 0.0368005633354187, 0.03634143993258476, -0.010985669679939747, -0.01573636382818222, -0.06179618462920189, 0.00679667666554451, 0.0794733315706253, 0.05461994931101799, 0.015568356961011887, 0.011929402127861977, -0.004401882644742727, -0.008070716634392738, 0.09628996253013611, -0.03920320048928261, 0.04950570687651634, 0.0540601871907711, 0.02374400570988655, -0.019593287259340286, -0.019064001739025116, -0.005907480604946613, -0.032367412000894547, 0.009877406992018223, -0.016563614830374718, 0.021007003262639046, -0.020849978551268578, -0.031531158834695816, -0.015316914767026901, 0.0032456591725349426, 0.011588595807552338, 0.012200419791042805, -0.05818379297852516, 0.01898038387298584, 0.01484754215925932, 0.0175811517983675, 0.04577960446476936, -0.04065747186541557, -0.10994157195091248, 0.0004791459650732577, -0.03095869906246662, -0.035393357276916504, -0.006208465434610844, 0.03121168538928032, -0.13296467065811157, 0.020326808094978333, 0.08071457594633102, -0.0970567911863327, 0.04394380748271942, 0.0003647631383500993, -0.022165920585393906, 0.05774503946304321, 0.0000000000000000000000000000000017297755694075054, -0.005259708501398563, 0.08486825972795486, -0.07168123126029968, -0.029039394110441208, 0.08743143081665039, 0.0029616437386721373, 0.0434352345764637, 0.061535656452178955, 0.0067534553818404675, 0.05370314419269562, -0.007043452933430672, 0.06859258562326431, 0.0872146338224411, -0.03694787994027138, 0.05820034444332123, 0.021911203861236572, 0.07631023228168488, -0.008504658006131649, -0.025401368737220764, 0.035536136478185654, -0.0665338933467865, 0.01354079321026802, -0.046644799411296844, 0.028177961707115173, 0.04896736145019531, 0.024734633043408394, 0.052835989743471146, 0.004218100570142269, 0.006893533747643232, -0.05443848669528961, 0.01119155716150999, 0.005997208878397942, 0.021362271159887314, -0.010831739753484726, 0.05044016242027283, -0.0006520991446450353, 0.14066462218761444, -0.04204025864601135, -0.10505321621894836, 0.08920837938785553, 0.09764526784420013, 0.02282773144543171, 0.03693673759698868, 0.04233284294605255, -0.01623660884797573, -0.00290100509300828, -0.03314925730228424, -0.0460723377764225, 0.0689152404665947, 0.042890071868896484, -0.007751733064651489, -0.10704190284013748, -0.03540744259953499, -0.04801769554615021, -0.09162824600934982, -0.011246507056057453, -0.051598891615867615, -0.020887311547994614, -0.0024565740022808313, -0.07123389840126038, -0.03166629374027252, -0.014010308310389519, -0.06723887473344803, 0.11069374531507492, 0.06377966701984406, -0.03587649017572403, -0.05023164302110672, 0.05157068371772766, -0.07091234624385834, 0.003950336016714573, 0.08970586210489273, -0.028020378202199936, -0.18072354793548584, -0.010118883103132248, 0.03215905278921127, -0.020550090819597244, -0.010878777131438255, -0.005762418266385794, -0.07440020143985748, -0.014157627709209919, 0.10345545411109924, 0.006073093973100185, -0.008677185513079166, 0.004661441780626774, 0.028626499697566032, 0.036055710166692734, -0.03027859516441822, 0.016812464222311974, -0.008278868161141872, -0.016922401264309883, -0.0689840018749237, -0.02167283371090889, 0.041456110775470734, 0.09102226048707962, -0.039477646350860596, -0.000000018152048752995142, 0.028650496155023575, -0.0973191186785698, -0.060019221156835556, 0.016817711293697357, 0.04626574367284775, 0.07306279987096786, 0.08712311834096909, -0.14244133234024048, -0.04301803931593895, -0.04807483032345772, 0.04783215746283531, 0.023077579215168953, -0.03765518218278885, -0.008192605338990688, 0.02522413246333599, -0.03151402622461319, -0.004646127577871084, -0.024643834680318832, 0.014826645143330097, -0.030714858323335648, -0.010235866531729698, 0.03345901891589165, -0.016526473686099052, 0.03487872704863548, -0.028637055307626724, 0.05040287598967552, -0.06158728525042534, 0.010100778192281723, -0.013297784142196178, 0.02213410660624504, 0.017726955935359, 0.002626946894451976, 0.017593571916222572, -0.047609809786081314, -0.05900982394814491, -0.030313700437545776, 0.03303280100226402, -0.02652478963136673, 0.10098998248577118, -0.00019122172670904547, 0.05562634766101837, 0.02233356051146984, 0.02344146929681301, 0.033980291336774826, -0.002809994388371706, -0.0033339231740683317, 0.010304052382707596, -0.041547369211912155, -0.021487629041075706, -0.05450388789176941, -0.022396937012672424, -0.03722207248210907, 0.037894539535045624, 0.017130445688962936, 0.032667435705661774, -0.03494641184806824, 0.028635133057832718, 0.041626255959272385, -0.07587552815675735, -0.012454203329980373, 0.0881056934595108, 0.02961580455303192, 0.05397157743573189, -0.0375930517911911}), "bar": value.String("foo")}),
	}
	optest.AssertEqual(t, tier, &pretrainedModel{}, value.NewDict(map[string]value.Value{
		"model": value.String("sbert"),
		"field": value.String("bert_embedding"),
	}), [][]value.Value{intable}, contextKwargTable, expected)
}

func cleanupPreTrainedModelTest(t *testing.T, tier tier.Tier, model string) {
	pretrainedId := modelstore.PreTrainedModelId(model, tier.ID)
	err := tier.SagemakerClient.DeleteModel(context.Background(), pretrainedId)
	assert.NoError(t, err)
	err = tier.SagemakerClient.DeleteEndpointConfig(context.Background(), pretrainedId)
	assert.NoError(t, err)
	err = tier.SagemakerClient.DeleteEndpoint(context.Background(), pretrainedId)
	assert.NoError(t, err)
}
