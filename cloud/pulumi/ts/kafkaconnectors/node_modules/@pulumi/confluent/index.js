"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
// Export members:
__exportStar(require("./apiKey"), exports);
__exportStar(require("./confluentEnvironment"), exports);
__exportStar(require("./connector"), exports);
__exportStar(require("./getEnvironment"), exports);
__exportStar(require("./getServiceAccount"), exports);
__exportStar(require("./kafkaCluster"), exports);
__exportStar(require("./provider"), exports);
__exportStar(require("./schemaRegistry"), exports);
__exportStar(require("./serviceAccount"), exports);
// Export sub-modules:
const config = require("./config");
exports.config = config;
// Import resources to register:
const apiKey_1 = require("./apiKey");
const confluentEnvironment_1 = require("./confluentEnvironment");
const connector_1 = require("./connector");
const kafkaCluster_1 = require("./kafkaCluster");
const schemaRegistry_1 = require("./schemaRegistry");
const serviceAccount_1 = require("./serviceAccount");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "confluent:index/apiKey:ApiKey":
                return new apiKey_1.ApiKey(name, undefined, { urn });
            case "confluent:index/confluentEnvironment:ConfluentEnvironment":
                return new confluentEnvironment_1.ConfluentEnvironment(name, undefined, { urn });
            case "confluent:index/connector:Connector":
                return new connector_1.Connector(name, undefined, { urn });
            case "confluent:index/kafkaCluster:KafkaCluster":
                return new kafkaCluster_1.KafkaCluster(name, undefined, { urn });
            case "confluent:index/schemaRegistry:SchemaRegistry":
                return new schemaRegistry_1.SchemaRegistry(name, undefined, { urn });
            case "confluent:index/serviceAccount:ServiceAccount":
                return new serviceAccount_1.ServiceAccount(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("confluent", "index/apiKey", _module);
pulumi.runtime.registerResourceModule("confluent", "index/confluentEnvironment", _module);
pulumi.runtime.registerResourceModule("confluent", "index/connector", _module);
pulumi.runtime.registerResourceModule("confluent", "index/kafkaCluster", _module);
pulumi.runtime.registerResourceModule("confluent", "index/schemaRegistry", _module);
pulumi.runtime.registerResourceModule("confluent", "index/serviceAccount", _module);
const provider_1 = require("./provider");
pulumi.runtime.registerResourcePackage("confluent", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:confluent") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map