import * as pulumi from "@pulumi/pulumi";
export declare class Connector extends pulumi.CustomResource {
    /**
     * Get an existing Connector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorState, opts?: pulumi.CustomResourceOptions): Connector;
    /**
     * Returns true if the given object is an instance of Connector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Connector;
    /**
     * ID of containing cluster, e.g. lkc-abc123
     */
    readonly clusterId: pulumi.Output<string>;
    /**
     * Type-specific Configuration of connector. String keys and values
     */
    readonly config: pulumi.Output<{
        [key: string]: any;
    }>;
    /**
     * Sensitive part of connector configuration. String keys and values
     */
    readonly configSensitive: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * ID of containing environment, e.g. env-abc123
     */
    readonly environmentId: pulumi.Output<string>;
    /**
     * The name of the connector
     */
    readonly name: pulumi.Output<string>;
    /**
     * Create a Connector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Connector resources.
 */
export interface ConnectorState {
    /**
     * ID of containing cluster, e.g. lkc-abc123
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Type-specific Configuration of connector. String keys and values
     */
    config?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Sensitive part of connector configuration. String keys and values
     */
    configSensitive?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * ID of containing environment, e.g. env-abc123
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The name of the connector
     */
    name?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Connector resource.
 */
export interface ConnectorArgs {
    /**
     * ID of containing cluster, e.g. lkc-abc123
     */
    clusterId: pulumi.Input<string>;
    /**
     * Type-specific Configuration of connector. String keys and values
     */
    config: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Sensitive part of connector configuration. String keys and values
     */
    configSensitive?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * ID of containing environment, e.g. env-abc123
     */
    environmentId: pulumi.Input<string>;
    /**
     * The name of the connector
     */
    name?: pulumi.Input<string>;
}
