"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.KafkaCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class KafkaCluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["availability"] = state ? state.availability : undefined;
            inputs["bootstrapServers"] = state ? state.bootstrapServers : undefined;
            inputs["cku"] = state ? state.cku : undefined;
            inputs["deployment"] = state ? state.deployment : undefined;
            inputs["environmentId"] = state ? state.environmentId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkEgress"] = state ? state.networkEgress : undefined;
            inputs["networkIngress"] = state ? state.networkIngress : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["serviceProvider"] = state ? state.serviceProvider : undefined;
            inputs["storage"] = state ? state.storage : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.availability === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availability'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.serviceProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceProvider'");
            }
            inputs["availability"] = args ? args.availability : undefined;
            inputs["cku"] = args ? args.cku : undefined;
            inputs["deployment"] = args ? args.deployment : undefined;
            inputs["environmentId"] = args ? args.environmentId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkEgress"] = args ? args.networkEgress : undefined;
            inputs["networkIngress"] = args ? args.networkIngress : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["serviceProvider"] = args ? args.serviceProvider : undefined;
            inputs["storage"] = args ? args.storage : undefined;
            inputs["bootstrapServers"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(KafkaCluster.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing KafkaCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new KafkaCluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of KafkaCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaCluster.__pulumiType;
    }
}
exports.KafkaCluster = KafkaCluster;
/** @internal */
KafkaCluster.__pulumiType = 'confluent:index/kafkaCluster:KafkaCluster';
//# sourceMappingURL=kafkaCluster.js.map