---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: local-static-provisioner
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: local-static-provisioner
    app.kubernetes.io/name: provisioner
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-static-provisioner-config
  namespace: kube-system
  labels:
    app.kubernetes.io/name: provisioner
    app.kubernetes.io/instance: local-static-provisioner
data:
  setPVOwnerRef: "true"
  useNodeNameOnly: "true"
  storageClassMap: |
    nvme-ssd:
       hostDir: /pv-disks
       mountDir: /pv-disks
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nvme-ssd
  labels:
    app.kubernetes.io/name: provisioner
    app.kubernetes.io/instance: local-static-provisioner
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: local-storage-provisioner-node-clusterrole
  labels:
    app.kubernetes.io/name: provisioner
    app.kubernetes.io/instance: local-static-provisioner
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["watch"]
- apiGroups: ["", "events.k8s.io"]
  resources: ["events"]
  verbs: ["create", "update", "patch"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: local-storage-provisioner-pv-binding
  labels:
    app.kubernetes.io/name: provisioner
    app.kubernetes.io/instance: local-static-provisioner
subjects:
- kind: ServiceAccount
  name: local-static-provisioner
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: system:persistent-volume-provisioner
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: local-storage-provisioner-node-binding
  labels:
    app.kubernetes.io/name: provisioner
    app.kubernetes.io/instance: local-static-provisioner
subjects:
- kind: ServiceAccount
  name: local-static-provisioner
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: local-storage-provisioner-node-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: local-volume-provisioner
  namespace: kube-system
  labels:
    app.kubernetes.io/name: provisioner
    app.kubernetes.io/instance: local-static-provisioner
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: provisioner
      app.kubernetes.io/instance: local-static-provisioner
  template:
    metadata:
      labels:
        app.kubernetes.io/name: provisioner
        app.kubernetes.io/instance: local-static-provisioner
      annotations:
        checksum/config: 9020bc1a8cc0d5f9d8448c43038ddd5c545eb18c2bb01d6fb8136ffe2fd78e09
    spec:
      serviceAccountName: local-static-provisioner
      nodeSelector:
        aws.amazon.com/eks-local-ssd: "true"
      containers:
        - name: provisioner
          image: k8s.gcr.io/sig-storage/local-volume-provisioner:v2.4.0
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: 100m
              memory: 200Mi
            requests:
              cpu: 50m
              memory: 100Mi
          env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MY_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: JOB_CONTAINER_IMAGE
            value: k8s.gcr.io/sig-storage/local-volume-provisioner:v2.4.0
          ports:
          - name: metrics
            containerPort: 8080
          volumeMounts:
            - name: provisioner-config
              mountPath: /etc/provisioner/config
              readOnly: true
            - name: provisioner-dev
              mountPath: /dev
            - name: nvme-ssd
              mountPath: /pv-disks
              mountPropagation: HostToContainer
      volumes:
        - name: provisioner-config
          configMap:
            name: local-static-provisioner-config
        - name: provisioner-dev
          hostPath:
            path: /dev
        - name: nvme-ssd
          hostPath:
            path: /pv-disks
---
